name: 'Local Cache'
description: 'Cache files in the workspace'
branding:
  icon: 'archive'
  color: 'gray-dark'
inputs:
  path:
    description: 'A list of files, directories, and wildcard patterns to cache and restore'
    required: true
  key:
    description: 'An explicit key for restoring and saving the cache'
    required: true
  fail-on-cache-miss:
    description: 'Fail the workflow if cache entry is not found'
    default: 'false'
    required: false
  lookup-only:
    description: 'Check if a cache entry exists for the given input(s) (key, restore-keys) without downloading the cache'
    default: 'false'
    required: false
outputs:
  cache-hit:
    description: 'A boolean value to indicate an exact match was found for the primary key'
    value: ${{ steps.check-cache.outputs.cache-hit }}
runs:
    using: 'composite'

    steps:
      - name: Check Runner OS
        if: ${{ runner.os != 'Linux' }}
        shell: bash
        run: |
          echo "::error title=⛔ error hint::Support Linux Only"
          exit 1

      #check if cache exists
      - name: Setup env
        shell: bash
        run: |
          echo "CACHE_DIR=$GITHUB_WORKSPACE/../_cache" >> $GITHUB_ENV
          echo "CACHE_PATH=$GITHUB_WORKSPACE/../_cache/${{ inputs.key }}.cpio" >> $GITHUB_ENV

      - name: Check if cache exists
        shell: bash
        id: check-cache
        run: |
          ls -lah "$CACHE_PATH" && echo "cache-hit=true" >> "$GITHUB_OUTPUT" || true

      - if: ${{ inputs.fail-on-cache-miss == 'true' && steps.check-cache.outputs.cache-hit != 'true' }}
        name: Fail on cache miss
        shell: bash
        run: |
          echo "::error title=⛔ error hint::Cache not found"
          exit 1 

      - if: ${{ inputs.lookup-only != 'true' }}
        uses: ./with-post-step
        name: Restore cache
        with:
          main: |
            # restore cache
            ls "$CACHE_PATH" && cpio -i -vd < "$CACHE_PATH" || echo "No cache to restore."
          post: |
            # save cache
            mkdir -p "$CACHE_DIR"
            find ${{inputs.path}} -print -depth | cpio -o -v > "$CACHE_PATH"
